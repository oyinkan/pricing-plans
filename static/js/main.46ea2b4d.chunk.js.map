{"version":3,"sources":["components/pricing/Pricing.js","App.js","serviceWorker.js","index.js"],"names":["Pricing","props","chooseItem","setState","state","subscribe","pricingLists","axios","get","then","res","data","className","this","map","list","key","id","name","price","users","storage","support","help","type","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8SAGqBA,E,kDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAeVC,WAAa,WACT,EAAKC,UAAU,SAAAC,GAAK,MAAK,CAAEC,WAAYD,EAAMC,eAf7C,EAAKD,MAAQ,CACTC,WAAW,EACXC,aAAc,IAJJ,E,gEAQG,IAAD,OAChBC,IAAMC,IAAN,mDACCC,MAAK,SAAAC,GACF,IAAMJ,EAAeI,EAAIC,KACzB,EAAKR,SAAS,CAAEG,sB,+BAQd,IAAD,OACL,OACI,yBAAKM,UAAU,aACX,yBAAKA,UAAU,OACTC,KAAKT,MAAME,aAAaQ,KAAI,SAACC,GAAD,OAC1B,yBAAKH,UAAU,WAAWI,IAAKD,EAAKE,IAChC,yBAAKL,UAAU,wBACX,yBAAKA,UAAU,eACX,wBAAIA,UAAU,2BAA2BG,EAAKG,OAElD,yBAAKN,UAAU,aACX,wBAAIA,UAAU,iCAAd,IAAgDG,EAAKI,MACjD,2BAAOP,UAAU,cAAjB,SAEJ,wBAAIA,UAAU,2BACV,4BAAKG,EAAKK,OACV,4BAAKL,EAAKM,SACV,4BAAKN,EAAKO,SACV,4BAAKP,EAAKQ,OAEd,4BACIC,KAAK,SACLZ,UAAU,2CACVK,GAAIF,EAAKE,GACTQ,QAAS,EAAKvB,YAEb,EAAKE,MAAMC,UAAY,aAAe,sB,GA/C1CqB,aCUtBC,MATf,WACE,OACE,yBAAKf,UAAU,OACb,wBAAIA,UAAU,eAAd,iBACA,kBAAC,EAAD,QCIcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.46ea2b4d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class Pricing extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            subscribe: false,\r\n            pricingLists: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(`http://www.mocky.io/v2/5eaef3c433000041329f428f`)\r\n        .then(res => {\r\n            const pricingLists = res.data;\r\n            this.setState({ pricingLists });\r\n        })\r\n    }\r\n\r\n    chooseItem = () => {\r\n        this.setState( state => ({ subscribe: !state.subscribe }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    { this.state.pricingLists.map((list) => \r\n                        <div className=\"col-md-4\" key={list.id}>\r\n                            <div className=\"card mb-4 box-shadow\">\r\n                                <div className=\"card-header\">\r\n                                    <h4 className=\"my-0 font-weight-normal\">{list.name}</h4>\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <h1 className=\"card-title pricing-card-title\">${list.price}\r\n                                        <small className=\"text-muted\">/ mo</small>\r\n                                    </h1>\r\n                                    <ul className=\"list-unstyled mt-3 mb-4\">\r\n                                        <li>{list.users}</li>\r\n                                        <li>{list.storage}</li>\r\n                                        <li>{list.support}</li>\r\n                                        <li>{list.help}</li>\r\n                                    </ul>\r\n                                    <button \r\n                                        type=\"button\" \r\n                                        className=\"btn btn-lg btn-block btn-outline-primary\"\r\n                                        id={list.id}\r\n                                        onClick={this.chooseItem}\r\n                                    >\r\n                                        {this.state.subscribe ? 'Subscribed' : 'Choose'}\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Pricing from './components/pricing/Pricing';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"text-center\">Pricing Plans</h1>\n      <Pricing />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}